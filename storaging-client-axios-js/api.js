"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * 对象存储服务
 * 提供文件、配置等对象存储服务。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectsApi = exports.ObjectsApiFactory = exports.ObjectsApiFp = exports.ObjectsApiAxiosParamCreator = exports.ConfigurationsApi = exports.ConfigurationsApiFactory = exports.ConfigurationsApiFp = exports.ConfigurationsApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
/**
 * ConfigurationsApi - axios parameter creator
 * @export
 */
const ConfigurationsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 获取应用的用户或系统的配置。
         * @summary 获取配置
         * @param {string} name
         * @param {string} [cid]
         * @param {boolean} [system]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: (name, cid, system, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('getConfiguration', 'name', name);
            const localVarPath = `/v1/configs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (system !== undefined) {
                localVarQueryParameter['system'] = system;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 新增或更新用户或系统配置。
         * @summary 设置配置
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {boolean} [system]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfiguration: (name, requestBody, cid, system, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'name' is not null or undefined
            (0, common_1.assertParamExists)('setConfiguration', 'name', name);
            // verify required parameter 'requestBody' is not null or undefined
            (0, common_1.assertParamExists)('setConfiguration', 'requestBody', requestBody);
            const localVarPath = `/v1/configs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (system !== undefined) {
                localVarQueryParameter['system'] = system;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(requestBody, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ConfigurationsApiAxiosParamCreator = ConfigurationsApiAxiosParamCreator;
/**
 * ConfigurationsApi - functional programming interface
 * @export
 */
const ConfigurationsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ConfigurationsApiAxiosParamCreator)(configuration);
    return {
        /**
         * 获取应用的用户或系统的配置。
         * @summary 获取配置
         * @param {string} name
         * @param {string} [cid]
         * @param {boolean} [system]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration(name, cid, system, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getConfiguration(name, cid, system, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 新增或更新用户或系统配置。
         * @summary 设置配置
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {boolean} [system]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfiguration(name, requestBody, cid, system, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.setConfiguration(name, requestBody, cid, system, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ConfigurationsApiFp = ConfigurationsApiFp;
/**
 * ConfigurationsApi - factory interface
 * @export
 */
const ConfigurationsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ConfigurationsApiFp)(configuration);
    return {
        /**
         * 获取应用的用户或系统的配置。
         * @summary 获取配置
         * @param {string} name
         * @param {string} [cid]
         * @param {boolean} [system]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration(name, cid, system, options) {
            return localVarFp.getConfiguration(name, cid, system, options).then((request) => request(axios, basePath));
        },
        /**
         * 新增或更新用户或系统配置。
         * @summary 设置配置
         * @param {string} name
         * @param {{ [key: string]: object; }} requestBody
         * @param {string} [cid]
         * @param {boolean} [system]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfiguration(name, requestBody, cid, system, options) {
            return localVarFp.setConfiguration(name, requestBody, cid, system, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ConfigurationsApiFactory = ConfigurationsApiFactory;
/**
 * ConfigurationsApi - object-oriented interface
 * @export
 * @class ConfigurationsApi
 * @extends {BaseAPI}
 */
class ConfigurationsApi extends base_1.BaseAPI {
    /**
     * 获取应用的用户或系统的配置。
     * @summary 获取配置
     * @param {string} name
     * @param {string} [cid]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    getConfiguration(name, cid, system, options) {
        return (0, exports.ConfigurationsApiFp)(this.configuration).getConfiguration(name, cid, system, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 新增或更新用户或系统配置。
     * @summary 设置配置
     * @param {string} name
     * @param {{ [key: string]: object; }} requestBody
     * @param {string} [cid]
     * @param {boolean} [system]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    setConfiguration(name, requestBody, cid, system, options) {
        return (0, exports.ConfigurationsApiFp)(this.configuration).setConfiguration(name, requestBody, cid, system, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ConfigurationsApi = ConfigurationsApi;
/**
 * ObjectsApi - axios parameter creator
 * @export
 */
const ObjectsApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * 创建一个对象。
         * @summary 创建对象
         * @param {BaseStorageObject} baseStorageObject
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject: (baseStorageObject, cid, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'baseStorageObject' is not null or undefined
            (0, common_1.assertParamExists)('createObject', 'baseStorageObject', baseStorageObject);
            const localVarPath = `/v1/objects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(baseStorageObject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 删除指定对象。
         * @summary 删除对象
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject: (id, cid, admin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('deleteObject', 'id', id);
            const localVarPath = `/v1/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 查找对象的数据。
         * @summary 查找对象
         * @param {string} [q]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findObjects: (q, page, size, cid, admin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            const localVarPath = `/v1/objects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }
            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 获取指定对象。
         * @summary 获取对象
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject: (id, cid, admin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getObject', 'id', id);
            const localVarPath = `/v1/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 获取对象的数据。
         * @summary 获取对象数据
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectData: (id, cid, admin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('getObjectData', 'id', id);
            const localVarPath = `/v1/objects/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 更新指定对象。
         * @summary 更新对象
         * @param {string} id
         * @param {BaseStorageObject} baseStorageObject
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObject: (id, baseStorageObject, cid, admin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('putObject', 'id', id);
            // verify required parameter 'baseStorageObject' is not null or undefined
            (0, common_1.assertParamExists)('putObject', 'baseStorageObject', baseStorageObject);
            const localVarPath = `/v1/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(baseStorageObject, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * 更新对象的数据。
         * @summary 更新对象数据
         * @param {string} id
         * @param {any} body
         * @param {string} [contentDisposition]
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObjectData: (id, body, contentDisposition, cid, admin, options = {}) => __awaiter(this, void 0, void 0, function* () {
            // verify required parameter 'id' is not null or undefined
            (0, common_1.assertParamExists)('putObjectData', 'id', id);
            // verify required parameter 'body' is not null or undefined
            (0, common_1.assertParamExists)('putObjectData', 'body', body);
            const localVarPath = `/v1/objects/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PUT' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication auth required
            // oauth required
            yield (0, common_1.setOAuthToObject)(localVarHeaderParameter, "auth", [], configuration);
            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }
            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }
            if (contentDisposition !== undefined && contentDisposition !== null) {
                localVarHeaderParameter['Content-Disposition'] = String(contentDisposition);
            }
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            localVarRequestOptions.data = (0, common_1.serializeDataIfNeeded)(body, localVarRequestOptions, configuration);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.ObjectsApiAxiosParamCreator = ObjectsApiAxiosParamCreator;
/**
 * ObjectsApi - functional programming interface
 * @export
 */
const ObjectsApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.ObjectsApiAxiosParamCreator)(configuration);
    return {
        /**
         * 创建一个对象。
         * @summary 创建对象
         * @param {BaseStorageObject} baseStorageObject
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject(baseStorageObject, cid, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.createObject(baseStorageObject, cid, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 删除指定对象。
         * @summary 删除对象
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject(id, cid, admin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteObject(id, cid, admin, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 查找对象的数据。
         * @summary 查找对象
         * @param {string} [q]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findObjects(q, page, size, cid, admin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.findObjects(q, page, size, cid, admin, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 获取指定对象。
         * @summary 获取对象
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject(id, cid, admin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getObject(id, cid, admin, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 获取对象的数据。
         * @summary 获取对象数据
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectData(id, cid, admin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.getObjectData(id, cid, admin, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 更新指定对象。
         * @summary 更新对象
         * @param {string} id
         * @param {BaseStorageObject} baseStorageObject
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObject(id, baseStorageObject, cid, admin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.putObject(id, baseStorageObject, cid, admin, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
        /**
         * 更新对象的数据。
         * @summary 更新对象数据
         * @param {string} id
         * @param {any} body
         * @param {string} [contentDisposition]
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObjectData(id, body, contentDisposition, cid, admin, options) {
            return __awaiter(this, void 0, void 0, function* () {
                const localVarAxiosArgs = yield localVarAxiosParamCreator.putObjectData(id, body, contentDisposition, cid, admin, options);
                return (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
            });
        },
    };
};
exports.ObjectsApiFp = ObjectsApiFp;
/**
 * ObjectsApi - factory interface
 * @export
 */
const ObjectsApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.ObjectsApiFp)(configuration);
    return {
        /**
         * 创建一个对象。
         * @summary 创建对象
         * @param {BaseStorageObject} baseStorageObject
         * @param {string} [cid]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject(baseStorageObject, cid, options) {
            return localVarFp.createObject(baseStorageObject, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除指定对象。
         * @summary 删除对象
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject(id, cid, admin, options) {
            return localVarFp.deleteObject(id, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 查找对象的数据。
         * @summary 查找对象
         * @param {string} [q]
         * @param {number} [page]
         * @param {number} [size]
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findObjects(q, page, size, cid, admin, options) {
            return localVarFp.findObjects(q, page, size, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定对象。
         * @summary 获取对象
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject(id, cid, admin, options) {
            return localVarFp.getObject(id, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取对象的数据。
         * @summary 获取对象数据
         * @param {string} id
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectData(id, cid, admin, options) {
            return localVarFp.getObjectData(id, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新指定对象。
         * @summary 更新对象
         * @param {string} id
         * @param {BaseStorageObject} baseStorageObject
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObject(id, baseStorageObject, cid, admin, options) {
            return localVarFp.putObject(id, baseStorageObject, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新对象的数据。
         * @summary 更新对象数据
         * @param {string} id
         * @param {any} body
         * @param {string} [contentDisposition]
         * @param {string} [cid]
         * @param {boolean} [admin]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObjectData(id, body, contentDisposition, cid, admin, options) {
            return localVarFp.putObjectData(id, body, contentDisposition, cid, admin, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ObjectsApiFactory = ObjectsApiFactory;
/**
 * ObjectsApi - object-oriented interface
 * @export
 * @class ObjectsApi
 * @extends {BaseAPI}
 */
class ObjectsApi extends base_1.BaseAPI {
    /**
     * 创建一个对象。
     * @summary 创建对象
     * @param {BaseStorageObject} baseStorageObject
     * @param {string} [cid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    createObject(baseStorageObject, cid, options) {
        return (0, exports.ObjectsApiFp)(this.configuration).createObject(baseStorageObject, cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 删除指定对象。
     * @summary 删除对象
     * @param {string} id
     * @param {string} [cid]
     * @param {boolean} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    deleteObject(id, cid, admin, options) {
        return (0, exports.ObjectsApiFp)(this.configuration).deleteObject(id, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 查找对象的数据。
     * @summary 查找对象
     * @param {string} [q]
     * @param {number} [page]
     * @param {number} [size]
     * @param {string} [cid]
     * @param {boolean} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    findObjects(q, page, size, cid, admin, options) {
        return (0, exports.ObjectsApiFp)(this.configuration).findObjects(q, page, size, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 获取指定对象。
     * @summary 获取对象
     * @param {string} id
     * @param {string} [cid]
     * @param {boolean} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    getObject(id, cid, admin, options) {
        return (0, exports.ObjectsApiFp)(this.configuration).getObject(id, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 获取对象的数据。
     * @summary 获取对象数据
     * @param {string} id
     * @param {string} [cid]
     * @param {boolean} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    getObjectData(id, cid, admin, options) {
        return (0, exports.ObjectsApiFp)(this.configuration).getObjectData(id, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 更新指定对象。
     * @summary 更新对象
     * @param {string} id
     * @param {BaseStorageObject} baseStorageObject
     * @param {string} [cid]
     * @param {boolean} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    putObject(id, baseStorageObject, cid, admin, options) {
        return (0, exports.ObjectsApiFp)(this.configuration).putObject(id, baseStorageObject, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 更新对象的数据。
     * @summary 更新对象数据
     * @param {string} id
     * @param {any} body
     * @param {string} [contentDisposition]
     * @param {string} [cid]
     * @param {boolean} [admin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    putObjectData(id, body, contentDisposition, cid, admin, options) {
        return (0, exports.ObjectsApiFp)(this.configuration).putObjectData(id, body, contentDisposition, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ObjectsApi = ObjectsApi;
