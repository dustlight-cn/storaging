/* tslint:disable */
/* eslint-disable */
/**
 * 对象存储服务
 * 提供文件、配置等对象存储服务。
 *
 * The version of the OpenAPI document: v1
 * Contact: hansin@dustlight.cn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BaseStorageObject
 */
export interface BaseStorageObject {
    /**
     * 
     * @type {Array<string>}
     * @memberof BaseStorageObject
     */
    owner?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BaseStorageObject
     */
    canRead?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof BaseStorageObject
     */
    canWrite?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BaseStorageObject
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseStorageObject
     */
    createdAt?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseStorageObject
     */
    clientId?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseStorageObject
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseStorageObject
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseStorageObject
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof BaseStorageObject
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof BaseStorageObject
     */
    size?: number;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof BaseStorageObject
     */
    additional?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface QueryResultStorageObject
 */
export interface QueryResultStorageObject {
    /**
     * 
     * @type {number}
     * @memberof QueryResultStorageObject
     */
    count?: number;
    /**
     * 
     * @type {Array<StorageObject>}
     * @memberof QueryResultStorageObject
     */
    data?: Array<StorageObject>;
}
/**
 * 
 * @export
 * @interface StorageObject
 */
export interface StorageObject {
    /**
     * 
     * @type {string}
     * @memberof StorageObject
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObject
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObject
     */
    type?: string;
    /**
     * 
     * @type {number}
     * @memberof StorageObject
     */
    size?: number;
    /**
     * 
     * @type {string}
     * @memberof StorageObject
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObject
     */
    clientId?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof StorageObject
     */
    additional?: { [key: string]: object; };
    /**
     * 
     * @type {Array<string>}
     * @memberof StorageObject
     */
    owner?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof StorageObject
     */
    canWrite?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof StorageObject
     */
    canRead?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof StorageObject
     */
    updatedAt?: string;
    /**
     * 
     * @type {string}
     * @memberof StorageObject
     */
    createdAt?: string;
}

/**
 * ConfigurationsApi - axios parameter creator
 * @export
 */
export const ConfigurationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 获取应用的用户或系统的配置。
         * @summary 获取配置
         * @param {string} name 
         * @param {string} [cid] 
         * @param {boolean} [system] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration: async (name: string, cid?: string, system?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('getConfiguration', 'name', name)
            const localVarPath = `/v1/configs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (system !== undefined) {
                localVarQueryParameter['system'] = system;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 新增或更新用户或系统配置。
         * @summary 设置配置
         * @param {string} name 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {boolean} [system] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfiguration: async (name: string, requestBody: { [key: string]: object; }, cid?: string, system?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('setConfiguration', 'name', name)
            // verify required parameter 'requestBody' is not null or undefined
            assertParamExists('setConfiguration', 'requestBody', requestBody)
            const localVarPath = `/v1/configs/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (system !== undefined) {
                localVarQueryParameter['system'] = system;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(requestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConfigurationsApi - functional programming interface
 * @export
 */
export const ConfigurationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ConfigurationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 获取应用的用户或系统的配置。
         * @summary 获取配置
         * @param {string} name 
         * @param {string} [cid] 
         * @param {boolean} [system] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getConfiguration(name: string, cid?: string, system?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: object; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getConfiguration(name, cid, system, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 新增或更新用户或系统配置。
         * @summary 设置配置
         * @param {string} name 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {boolean} [system] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setConfiguration(name: string, requestBody: { [key: string]: object; }, cid?: string, system?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setConfiguration(name, requestBody, cid, system, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ConfigurationsApi - factory interface
 * @export
 */
export const ConfigurationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ConfigurationsApiFp(configuration)
    return {
        /**
         * 获取应用的用户或系统的配置。
         * @summary 获取配置
         * @param {string} name 
         * @param {string} [cid] 
         * @param {boolean} [system] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getConfiguration(name: string, cid?: string, system?: boolean, options?: any): AxiosPromise<{ [key: string]: object; }> {
            return localVarFp.getConfiguration(name, cid, system, options).then((request) => request(axios, basePath));
        },
        /**
         * 新增或更新用户或系统配置。
         * @summary 设置配置
         * @param {string} name 
         * @param {{ [key: string]: object; }} requestBody 
         * @param {string} [cid] 
         * @param {boolean} [system] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setConfiguration(name: string, requestBody: { [key: string]: object; }, cid?: string, system?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.setConfiguration(name, requestBody, cid, system, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConfigurationsApi - object-oriented interface
 * @export
 * @class ConfigurationsApi
 * @extends {BaseAPI}
 */
export class ConfigurationsApi extends BaseAPI {
    /**
     * 获取应用的用户或系统的配置。
     * @summary 获取配置
     * @param {string} name 
     * @param {string} [cid] 
     * @param {boolean} [system] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    public getConfiguration(name: string, cid?: string, system?: boolean, options?: any) {
        return ConfigurationsApiFp(this.configuration).getConfiguration(name, cid, system, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 新增或更新用户或系统配置。
     * @summary 设置配置
     * @param {string} name 
     * @param {{ [key: string]: object; }} requestBody 
     * @param {string} [cid] 
     * @param {boolean} [system] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConfigurationsApi
     */
    public setConfiguration(name: string, requestBody: { [key: string]: object; }, cid?: string, system?: boolean, options?: any) {
        return ConfigurationsApiFp(this.configuration).setConfiguration(name, requestBody, cid, system, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ObjectsApi - axios parameter creator
 * @export
 */
export const ObjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 创建一个对象。
         * @summary 创建对象
         * @param {BaseStorageObject} baseStorageObject 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject: async (baseStorageObject: BaseStorageObject, cid?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'baseStorageObject' is not null or undefined
            assertParamExists('createObject', 'baseStorageObject', baseStorageObject)
            const localVarPath = `/v1/objects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseStorageObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 删除指定对象。
         * @summary 删除对象
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject: async (id: string, cid?: string, admin?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteObject', 'id', id)
            const localVarPath = `/v1/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 查找对象的数据。
         * @summary 查找对象
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findObjects: async (q?: string, page?: number, size?: number, cid?: string, admin?: boolean, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/objects`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (q !== undefined) {
                localVarQueryParameter['q'] = q;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取指定对象。
         * @summary 获取对象
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject: async (id: string, cid?: string, admin?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getObject', 'id', id)
            const localVarPath = `/v1/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取对象的数据。
         * @summary 获取对象数据
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectData: async (id: string, cid?: string, admin?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getObjectData', 'id', id)
            const localVarPath = `/v1/objects/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新指定对象。
         * @summary 更新对象
         * @param {string} id 
         * @param {BaseStorageObject} baseStorageObject 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObject: async (id: string, baseStorageObject: BaseStorageObject, cid?: string, admin?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putObject', 'id', id)
            // verify required parameter 'baseStorageObject' is not null or undefined
            assertParamExists('putObject', 'baseStorageObject', baseStorageObject)
            const localVarPath = `/v1/objects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baseStorageObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 更新对象的数据。
         * @summary 更新对象数据
         * @param {string} id 
         * @param {any} body 
         * @param {string} [contentDisposition] 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObjectData: async (id: string, body: any, contentDisposition?: string, cid?: string, admin?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('putObjectData', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('putObjectData', 'body', body)
            const localVarPath = `/v1/objects/{id}/data`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication auth required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "auth", [], configuration)

            if (cid !== undefined) {
                localVarQueryParameter['cid'] = cid;
            }

            if (admin !== undefined) {
                localVarQueryParameter['admin'] = admin;
            }

            if (contentDisposition !== undefined && contentDisposition !== null) {
                localVarHeaderParameter['Content-Disposition'] = String(contentDisposition);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectsApi - functional programming interface
 * @export
 */
export const ObjectsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ObjectsApiAxiosParamCreator(configuration)
    return {
        /**
         * 创建一个对象。
         * @summary 创建对象
         * @param {BaseStorageObject} baseStorageObject 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createObject(baseStorageObject: BaseStorageObject, cid?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createObject(baseStorageObject, cid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 删除指定对象。
         * @summary 删除对象
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteObject(id: string, cid?: string, admin?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteObject(id, cid, admin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 查找对象的数据。
         * @summary 查找对象
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findObjects(q?: string, page?: number, size?: number, cid?: string, admin?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryResultStorageObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findObjects(q, page, size, cid, admin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取指定对象。
         * @summary 获取对象
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getObject(id: string, cid?: string, admin?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StorageObject>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getObject(id, cid, admin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 获取对象的数据。
         * @summary 获取对象数据
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getObjectData(id: string, cid?: string, admin?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getObjectData(id, cid, admin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新指定对象。
         * @summary 更新对象
         * @param {string} id 
         * @param {BaseStorageObject} baseStorageObject 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putObject(id: string, baseStorageObject: BaseStorageObject, cid?: string, admin?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putObject(id, baseStorageObject, cid, admin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 更新对象的数据。
         * @summary 更新对象数据
         * @param {string} id 
         * @param {any} body 
         * @param {string} [contentDisposition] 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putObjectData(id: string, body: any, contentDisposition?: string, cid?: string, admin?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.putObjectData(id, body, contentDisposition, cid, admin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ObjectsApi - factory interface
 * @export
 */
export const ObjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ObjectsApiFp(configuration)
    return {
        /**
         * 创建一个对象。
         * @summary 创建对象
         * @param {BaseStorageObject} baseStorageObject 
         * @param {string} [cid] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createObject(baseStorageObject: BaseStorageObject, cid?: string, options?: any): AxiosPromise<StorageObject> {
            return localVarFp.createObject(baseStorageObject, cid, options).then((request) => request(axios, basePath));
        },
        /**
         * 删除指定对象。
         * @summary 删除对象
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject(id: string, cid?: string, admin?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.deleteObject(id, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 查找对象的数据。
         * @summary 查找对象
         * @param {string} [q] 
         * @param {number} [page] 
         * @param {number} [size] 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findObjects(q?: string, page?: number, size?: number, cid?: string, admin?: boolean, options?: any): AxiosPromise<QueryResultStorageObject> {
            return localVarFp.findObjects(q, page, size, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取指定对象。
         * @summary 获取对象
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject(id: string, cid?: string, admin?: boolean, options?: any): AxiosPromise<StorageObject> {
            return localVarFp.getObject(id, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取对象的数据。
         * @summary 获取对象数据
         * @param {string} id 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObjectData(id: string, cid?: string, admin?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.getObjectData(id, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新指定对象。
         * @summary 更新对象
         * @param {string} id 
         * @param {BaseStorageObject} baseStorageObject 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObject(id: string, baseStorageObject: BaseStorageObject, cid?: string, admin?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.putObject(id, baseStorageObject, cid, admin, options).then((request) => request(axios, basePath));
        },
        /**
         * 更新对象的数据。
         * @summary 更新对象数据
         * @param {string} id 
         * @param {any} body 
         * @param {string} [contentDisposition] 
         * @param {string} [cid] 
         * @param {boolean} [admin] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putObjectData(id: string, body: any, contentDisposition?: string, cid?: string, admin?: boolean, options?: any): AxiosPromise<void> {
            return localVarFp.putObjectData(id, body, contentDisposition, cid, admin, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectsApi - object-oriented interface
 * @export
 * @class ObjectsApi
 * @extends {BaseAPI}
 */
export class ObjectsApi extends BaseAPI {
    /**
     * 创建一个对象。
     * @summary 创建对象
     * @param {BaseStorageObject} baseStorageObject 
     * @param {string} [cid] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public createObject(baseStorageObject: BaseStorageObject, cid?: string, options?: any) {
        return ObjectsApiFp(this.configuration).createObject(baseStorageObject, cid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 删除指定对象。
     * @summary 删除对象
     * @param {string} id 
     * @param {string} [cid] 
     * @param {boolean} [admin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public deleteObject(id: string, cid?: string, admin?: boolean, options?: any) {
        return ObjectsApiFp(this.configuration).deleteObject(id, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 查找对象的数据。
     * @summary 查找对象
     * @param {string} [q] 
     * @param {number} [page] 
     * @param {number} [size] 
     * @param {string} [cid] 
     * @param {boolean} [admin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public findObjects(q?: string, page?: number, size?: number, cid?: string, admin?: boolean, options?: any) {
        return ObjectsApiFp(this.configuration).findObjects(q, page, size, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取指定对象。
     * @summary 获取对象
     * @param {string} id 
     * @param {string} [cid] 
     * @param {boolean} [admin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public getObject(id: string, cid?: string, admin?: boolean, options?: any) {
        return ObjectsApiFp(this.configuration).getObject(id, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取对象的数据。
     * @summary 获取对象数据
     * @param {string} id 
     * @param {string} [cid] 
     * @param {boolean} [admin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public getObjectData(id: string, cid?: string, admin?: boolean, options?: any) {
        return ObjectsApiFp(this.configuration).getObjectData(id, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新指定对象。
     * @summary 更新对象
     * @param {string} id 
     * @param {BaseStorageObject} baseStorageObject 
     * @param {string} [cid] 
     * @param {boolean} [admin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public putObject(id: string, baseStorageObject: BaseStorageObject, cid?: string, admin?: boolean, options?: any) {
        return ObjectsApiFp(this.configuration).putObject(id, baseStorageObject, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 更新对象的数据。
     * @summary 更新对象数据
     * @param {string} id 
     * @param {any} body 
     * @param {string} [contentDisposition] 
     * @param {string} [cid] 
     * @param {boolean} [admin] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public putObjectData(id: string, body: any, contentDisposition?: string, cid?: string, admin?: boolean, options?: any) {
        return ObjectsApiFp(this.configuration).putObjectData(id, body, contentDisposition, cid, admin, options).then((request) => request(this.axios, this.basePath));
    }
}


